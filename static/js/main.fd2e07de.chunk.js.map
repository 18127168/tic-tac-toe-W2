{"version":3,"sources":["Components/Square/index.js","Components/Board/index.js","Components/Game/index.js","reportWebVitals.js","index.js"],"names":["Square","className","click","value","onClick","Board","squares","winningLine","renderSquare","i","console","log","includes","getRow","items","j","push","getCol","calculateWinner","lines","length","a","b","c","d","e","win","winner","undefined","Game","status","useState","stepNumber","setStepNumber","isXNext","setIsXNext","sortedAsc","setSortedAsc","Array","fill","col","row","history","setHistory","handleClick","position","newHistory","slice","postion","Math","floor","concat","current","winning","moves","map","step","move","desc","jumpTo","reverse","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fd2e07de.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n/**\r\n * The square component\r\n * \r\n * @param { string } className\r\n * @param { callback } click\r\n * @param { string } value\r\n * \r\n * @return { JSX.Element }\r\n */\r\nconst Square = ({ className, click, value }) => (\r\n    <button className={'square ' + className ?? ''} onClick={click}>\r\n    {value}\r\n    </button>\r\n);  \r\n\r\nexport default Square;","import React from \"react\";\r\nimport Square from \"../Square\";\r\n\r\n/**\r\n * The board component\r\n * \r\n * @param { array } winningLine\r\n * @param { array } squares\r\n * @param { callback } onClick\r\n * \r\n * @return { JSX.Element }\r\n */\r\nconst Board = ({squares, winningLine, onClick}) => {\r\n\r\n    const renderSquare = (i) => {\r\n        if (winningLine !== null){\r\n            console.log(winningLine.includes(i));\r\n        }\r\n        return (\r\n        <Square\r\n          className={ ((winningLine !== null && winningLine.includes(i))? \"hightlightCell\" : \"\") }\r\n          value={ squares[i] }\r\n          click={ () => onClick(i) }\r\n        />\r\n      );\r\n    }\r\n    \r\n    const getRow = (i) => {\r\n        let items = [];\r\n        for (let j = 0; j < 5; j++) {\r\n            items.push(renderSquare(i*5+j));\r\n        }\r\n\r\n        return <div className=\"board-row\">{items}</div>;\r\n    }\r\n\r\n    const getCol = () => {  \r\n        let items = [];\r\n    \r\n        items.push(<div></div>)\r\n        for (let i = 0; i < 5; i++) {\r\n            items.push(getRow(i));\r\n        }\r\n\r\n        return items;\r\n    }\r\n\r\n    return <div>{getCol()}</div>;\r\n};\r\n\r\nexport default Board;","import React, { useState } from \"react\";\r\nimport Board from \"../Board\";\r\n\r\n/**\r\n * Calculate the position function\r\n * \r\n * @param { number } position\r\n * \r\n * @return { Object}\r\n */\r\nfunction calculatePosition(position){\r\n    const col = position%5;\r\n    const row = Math.floor(position/5);\r\n  \r\n    return { col, row}\r\n}\r\n\r\n/**\r\n * Calculate the position function\r\n * \r\n * @param { array } squares\r\n * \r\n * @return { Object}\r\n */\r\nfunction calculateWinner(squares) {\r\n    const lines = [\r\n      [0, 1, 2, 3, 4],\r\n      [5, 6, 7, 8, 9],\r\n      [10, 11, 12, 13, 14],\r\n      [15, 16, 17, 18, 19],\r\n      [20, 21, 22, 23, 24],\r\n      [0, 5, 10, 15, 20],\r\n      [1, 6, 11, 16, 21],\r\n      [2, 7, 12, 17, 22],\r\n      [3, 8, 13, 18, 23],\r\n      [4, 9, 14, 19, 24],\r\n      [0, 6, 12, 18, 24],\r\n      [4, 8, 12, 16, 20],\r\n    ];\r\n\r\n    for (let i = 0; i < lines.length; i++) {\r\n      let [a, b, c, d, e] = lines[i];\r\n      if (squares[a] && squares[a] === squares[b] &&\r\n          squares[a] === squares[c] && squares[a] === squares[d] && \r\n          squares[a] === squares[e]) {\r\n        return {win: true, winner: squares[a], winningLine: [a, b, c, d, e]} ;\r\n      }\r\n    }\r\n  \r\n    for (let i = 0; i < squares.length; i++){\r\n      if (squares[i] === null || squares[i] === undefined){\r\n        return null;\r\n      }\r\n    }\r\n  \r\n    return {win: false} ;\r\n}\r\n\r\n/**\r\n * The game component\r\n * \r\n * @return { JSX.Element }\r\n */\r\nconst Game = () => {\r\n    const [stepNumber, setStepNumber] = useState(0);\r\n    const [isXNext, setIsXNext] = useState(true);\r\n    const [sortedAsc, setSortedAsc] = useState(true);\r\n    const [history, setHistory] = useState([\r\n        {\r\n            squares: Array(9).fill(null),\r\n            col: null,\r\n            row: null\r\n        }\r\n    ]);\r\n \r\n    const handleClick = (i) => {\r\n        const newHistory = history.slice(0, stepNumber + 1);\r\n        const current = newHistory[newHistory.length - 1];\r\n        const squares = current.squares.slice();\r\n        let postion = calculatePosition(i);\r\n        let winning = calculateWinner(squares);\r\n    \r\n        if (winning !== null || (squares[i] !== null && squares[i] !== undefined)) {\r\n          return;\r\n        } \r\n        \r\n        squares[i] = isXNext ? \"X\" : \"O\";\r\n        setHistory(newHistory.concat([\r\n            {\r\n              squares: squares,\r\n              row: postion.row,\r\n              col: postion.col\r\n            }\r\n        ]));\r\n        setStepNumber(newHistory.length)\r\n        setIsXNext(!isXNext);\r\n         \r\n    }\r\n\r\n    const jumpTo = (step) => {\r\n        \r\n        setStepNumber(step);\r\n        setIsXNext((step % 2) === 0);\r\n    }\r\n\r\n    const newHistory = history;\r\n    const current = newHistory[stepNumber];\r\n    const winning = calculateWinner(current.squares);\r\n    const moves = newHistory.map((step, move) => {\r\n    const desc = move ?\r\n        'Go to move #' + move + \"(\" + step.col + \", \" + step.row + \")\" :\r\n        'Go to game start';\r\n    return (\r\n        <li key={move}>\r\n        <button\r\n            className={move === stepNumber ? \"textBold\" : \"\"} \r\n            onClick={() => jumpTo(move)}>{desc}</button>\r\n        </li>\r\n    );\r\n    });\r\n  \r\n    let status;\r\n    if (winning === null) {\r\n        status = \"Next player: \" + (isXNext ? \"X\" : \"O\");\r\n    } else if (winning.win) {\r\n        status = \"Winner: \" + winning.winner;\r\n    } else {\r\n        status = \"This match is draw!\"\r\n    }\r\n\r\n    return (\r\n        <div className=\"game\">\r\n            <div className=\"game-board\">\r\n            <Board\r\n                squares={current.squares}\r\n                winningLine={ winning? (winning.winningLine ?? null) : null }\r\n                onClick={i => handleClick(i)}\r\n            />\r\n            </div>\r\n            <div className=\"game-info\">\r\n            <div>{status}</div>\r\n            <button onClick={() => setSortedAsc(!sortedAsc)}> Sort The Move </button>\r\n            <ol>{ sortedAsc? moves : moves.reverse()}</ol>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n  \r\nexport default Game;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Game from './Components/Game/index';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}